// schema.prisma

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
}

enum Role {
  OWNER
  ADMIN
  VIEWER
  EMPLOYEE
  RECRUITER
  PEOPLE_MANAGER
  HIRING_MANAGER
  ONBOARDING_MANAGER
  UNASSIGNED
}

enum Status {
  SUBMITTED
  APPROVED
  REJECTED
}

enum Rate {
  HOUR
  DAY
  WEEK
  MONTH
}

enum Billing {
  FIXED_COST
  PROJECT_HOURS
  TASK_HOURS
  STAFF_HOURS
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String     @id @default(cuid())
  sessionToken String     @unique
  userId       String
  clientId     String
  clientUserId String
  expires      DateTime
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  client       Client     @relation(fields: [clientId], references: [id])
  clientUser   ClientUser @relation(fields: [clientUserId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String         @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String         @unique
  emailVerified DateTime?
  password      String?
  image         String?
  userDomain    String?
  accounts      Account[]
  sessions      Session[]
  client        ClientUser[]
  ProjectUsers  ProjectUsers[]
  TimeReport    TimeReport[]
  LeaveRequestType LeaveRequestType[]
  LeaveRequest LeaveRequest[]
}

model Client {
  id            String       @id @default(cuid())
  domain        String       @unique
  companyName   String?
  logo          String?
  website       String?
  description   String?
  countryCode   String?
  phoneNumber   String?
  streetNo      String?
  streetAddress String?
  province      String?
  zipCode       String?
  country       String?
  user          ClientUser[]
  sessions      Session[]
}

model ClientUser {
  id       String    @id @default(cuid())
  client   Client    @relation(fields: [clientId], references: [id])
  clientId String
  user     User      @relation(fields: [userId], references: [id])
  userId   String
  role     Role[]
  sessions Session[]
}

model Project {
  id              String            @id @default(cuid())
  name            String
  code            String?
  customer        Customer          @relation(fields: [customerId], references: [id])
  customerId      String
  ProjectActivity ProjectActivity[]
  billingMethod   Billing
  currency        String
  ProjectUsers    ProjectUsers[]
  TimeReport      TimeReport[]
  startDate       DateTime?
  endDate         DateTime?
}

model Customer {
  id      String    @id @default(cuid())
  name    String
  Project Project[]
}

model Activity {
  id              String            @id @default(cuid())
  name            String
  chargable       Boolean           @default(true)
  ProjectActivity ProjectActivity[]
  TimeReport      TimeReport[]
}

model ProjectActivity {
  id           String      @id @default(cuid())
  project      Project     @relation(fields: [projectId], references: [id])
  projectId    String
  activity     Activity    @relation(fields: [activityId], references: [id])
  activityId   String
  chargable    Boolean
  timeReportId String?
  TimeReport   TimeReport? @relation(fields: [timeReportId], references: [id])
}

model ProjectUsers {
  id         String       @id @default(cuid())
  project    Project      @relation(fields: [projectId], references: [id])
  projectId  String
  user       User         @relation(fields: [userId], references: [id])
  userId     String
  rate       Int
  rateBy     Rate
  startDate  DateTime?
  endDate    DateTime?
  approver   Boolean?
  reviewer   Boolean?
  TimeReport TimeReport[]
}

model TimeReport {
  id              String            @id @default(cuid())
  startTime       DateTime
  endTime         DateTime
  hours           Int
  notes           String?
  status          Status
  project         Project           @relation(fields: [projectId], references: [id])
  activity        Activity          @relation(fields: [activityId], references: [id])
  user            User              @relation(fields: [userId], references: [id])
  userId          String
  approver        ProjectUsers      @relation(fields: [approverId], references: [id])
  approverId      String
  ProjectActivity ProjectActivity[]
  projectId       String
  activityId      String
  comment         String?
}

//added for leave Request

model LeaveRequestType {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  updatedBy String

  user         User           @relation(fields: [updatedBy], references: [id])
  
  LeaveRequest LeaveRequest[]
}

model LeaveRequest {
  id               String           @id @default(cuid())
  userId           String
  user             User             @relation(fields: [userId], references: [id])
  date             String
  leaveType        String
  leaveRequestType LeaveRequestType @relation(fields: [leaveType], references: [id])
  status           String //pending, approved, rejected
  notes            String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@index([userId, date])
}
